name: Go Build & Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Verify dependencies
        run: go mod tidy && go mod verify

      - name: Build Linux binary
        run: GOOS=linux GOARCH=amd64 go build -v -o raminfo ./ 

      - name: Build Windows binary
        run: GOOS=windows GOARCH=amd64 go build -v -o raminfo.exe ./

      - name: Delete existing 'latest' release (if exists)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = 'latest';
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
              console.log(`Deleted existing release with tag ${tag}`);
            } catch (error) {
              if (error.status === 404) {
                console.log("No existing release to delete");
              } else {
                throw error;
              }
            }

      - name: Upload new 'latest' release
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: Latest Release
          artifacts: |
            raminfo
            raminfo.exe
